// Given two linked lists sorted in ascending order. Merge them in-place and return head of the merged list. For example, if first list is 10->20->30 and second list is 15->17, then the result list should be 10->15->17->20->30.
// It is strongly recommended to do merging in-place using O(1) extra space.
class Node {
  constructor(value){
    this.value = value;
    this.next = null;
  }
}
  
var head2 = new Node(15);
var n1 = new Node(17);
head2.next = n1;

var head1 = new Node(10);
var n2 = new Node(20);
var n3 = new Node(30);
head1.next = n2;
n2.next = n3;

function merge (head1, head2){
  if(head1 === null){
    return head2;
  }
  if(head2 === null){
    return head1;
  }
  var curr1 = head1;
  var next1 = curr1.next;
  var curr2 = head2;
  var next2 = curr2.next;
  while(next1 !== null && next2 !== null){
    if(curr1.value < curr2.value){
      if(next1.value >= curr2.value){
        curr1.next = curr2;
        curr1 = next1;
        next1 = next1.next;
        curr2 = next2;
        next2 = next2.next;
      }else{
        curr1 = next1;
        next1 = next1.next;
      }    
    }else if(curr2.value < curr1.value){
      if(next2.value >= curr1.value){
        curr2.next = curr1;
        curr2 = next2;
        next2 = next2.next;
        curr1 = next1;
        next1 = next1.next;
      }else{
        curr2 = next2;
        next2 = next2.next;
      }    
    }
  }
  if(next1 !== null){
    curr2.next = curr1;
  }
  if(next2 !== null){
    curr1.next = curr2;
  }
  return head1;
}
merge (head1, head2);
